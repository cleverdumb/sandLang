global F <^E, ^W, ^S, ^O>
global I <Stone, ^T1, ^T2, ^T3, ^T4>
global L <^W, ^S, ^O>

atom Empty alias E {
    section property {
        cdef render 0
        cdef density 0
    }
}


atom Fall {
    section property {
        cdef render 0
    }
    section update {
        match (0, 0, 1, 2) {
            eval [density] > [density-0,1]
            pattern
            x
            F
        }
        -> {
            def F = pick(0, 1)
            pattern
            F
            x
        }
    }
}


atom Water alias W {
    section property {
        cdef render 1
        cdef color #46B1C9

        cdef density 10

        def left 0
    }
    section init {
        set [left] = [$a'0'2'1]
    }
    section update {
        inherit Fall

        match (1, 0, 2, 2) {
            eval [left] == 1
            pattern
            F x
            * n
        }
        -> {
            def F = pick(0, 0)
            pattern
            x F
            / /
        }

        match (1, 0, 2, 2) {
            eval [left] == 1
            pattern
            F x
            * e
        }
        -> {
            def F = pick(0, 0)
            pattern
            x F
            / /
        }

        
        match (2, 0, 3, 2) {
            eval [left] == 1
            pattern
            F F x
            * * n
        }
        -> {
            def F = pick(0, 0)
            pattern
            x / F
            / / /
        }

        match (2, 0, 3, 2) {
            eval [left] == 1
            pattern
            F F x
            * * e
        }
        -> {
            def F = pick(0, 0)
            pattern
            x / F
            / / /
        }
        

        match (0, 0, 2, 2) {
            eval [left] == 0
            pattern
            x F
            e *
        }
        -> {
            def F = pick(1, 0)
            pattern
            F x
            / /
        }

        match (0, 0, 2, 2) {
            eval [left] == 0
            pattern
            x F
            n *
        }
        -> {
            def F = pick(1, 0)
            pattern
            F x
            / /
        }

        
        match (0, 0, 3, 2) {
            eval [left] == 0
            pattern
            x F F
            n * *
        }
        -> {
            def F = pick(2, 0)
            pattern
            F / x 
            / / /
        }

        match (0, 0, 3, 2) {
            eval [left] == 0
            pattern
            x F F
            e * *
        }
        -> {
            def F = pick(2, 0)
            pattern
            F / x 
            / / /
        }
        

        match (1, 0, 2, 1) {
            eval [left] == 1
            eval [left-0, 0] == 0
            pattern
            L x
        }
        -> P-1 {
            set [left] = 0
            set [left-0, 0] = 1
            non-break
        }

        match (0, 0, 2, 1) {
            eval [left] == 0
            eval [left-0, 0] == 1
            pattern
            x L
        }
        -> P-1 {
            set [left] = 1
            set [left-0, 0] = 0
            non-break
        }

        match (0, 0, 2, 2) {
            eval [density] > [density-1,1]
            pattern
            x _
            n L
        }
        -> {
            def F = pick(1, 1)
            pattern
            F /
            / x
            set [left] = 0
        }

        match (1, 0, 2, 2) {
            eval [density] > [density-0,1]
            pattern
            _ x
            L n
        }
        -> {
            def F = pick(0, 1)
            pattern
            / F
            x /
            set [left] = 1
        }

        match (1, 0, 2, 1) {
            eval [left] == 1
            pattern
            e x
        }
        -> {
            set [left] = 0
            non-break
        }

        match (0, 0, 2, 1) {
            eval [left] == 0
            pattern
            x e
        }
        -> {
            set [left] = 1
            non-break
        }

        match (1, 0, 2, 1) {
            eval [left] == 1
            pattern
            I x
        }
        -> {
            set [left] = 0
            non-break
        }

        match (0, 0, 2, 1) {
            eval [left] == 0
            pattern
            x I
        }
        -> {
            set [left] = 1
            non-break
        }

        match (0, 0, 1, 2) {
            eval [density] > [density-0,1]
            pattern
            x
            F
        }
        -> {
            def L = pick(0, 1)
            pattern
            L
            x
        }

        match (0, 1, 1, 2) {
            eval [density] < [density-0,1]
            pattern
            F
            x
        }
        -> {
            def L = pick(0, 0)
            pattern
            x
            L
        }
    }
}

atom Slime alias S {
    section property {
        cdef render 1
        cdef color #32DE8A

        cdef density 5

        def left 0
    }
    section init {
        set [left] = [$a'0'2'1]
    }
    section update {
        inherit Water -P=0.2
    }
}

atom Oil alias O {
    section property {
        cdef render 1
        cdef color #EFF7CF

        cdef density 2

        def left 0
    }
    section init {
        set [left] = [$a'0'2'1]
    }
    section update {
        inherit Water -P=0.5
    }
}

atom Test1 alias T1 {
    section property {
        cdef render 1
        cdef color #FFFFFF

        cdef density 1
    }
    section update {
        inherit Fall
    }
}

atom Test2 alias T2 {
    section property {
        cdef render 1
        cdef color #CCCCCC

        cdef density 4
    }
    section update {
        inherit Fall
    }
}

atom Test3 alias T3 {
    section property {
        cdef render 1
        cdef color #AAAAAA

        cdef density 7
    }
    section update {
        inherit Fall
    }
}

atom Test4 alias T4 {
    section property {
        cdef render 1
        cdef color #888888

        cdef density 13
    }
    section update {
        inherit Fall
    }
}